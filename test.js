const input = [[0], [0], [[0], [0]], [0]];

// const output = [0, 0, 0, 0, 0];

function flattenDeep(arr) {
    //กำหนดค่าเริ่มต้นให้ res เพราะเราจะใช้ตัวแปรนี้ซ้ำกันหลายครั้ง
    let res = arr;
    // วน while (true) เพราะยังไม่รู้ว่าลูปจะจบตอนไหน
    while (true) {
        // concat เป็นการเอาค่ามาเติมใน array 
        // เช่น [].concat(1) => [1]

        // [].concat([1,2,3]) => [1,2,3] 
        // (ถ้าเป็นอาเรย์ มันจะแตกออก 1 ชั้น คือ [] , [1,2,3] ทั้งสองตัวโดนแดกออก 1 ชั้น 
        // [] กลายเป็นค่าวาง, [1,2,3] กลายเป็น 1,2,3 แบบไม่มี อาเรย์
        // จากนั้นเอาสองค่ามาต่อกัน แล้วครอบด้วย อาเรย์ ก็จะได้ [ค่าว่าง ต่อกับ 1,2,3]
        // ได้ผลลัพธ์เป็น [1,2,3] ครอบด้วยอาเรย์เป็น [1,2,3])

        // [1].concat([1,2,[3]]) => [1,1,2,[3]]
        // 1 ต่อกับ 1,2,[3] ได้เป็น [1,1,2,[3]]

        // [1].concat(...[1,2,[3]]) => [1,1,2,3]
        // อันนี้ ตัวหลังมีการแตกอาเรย์ก่อน 1 รอบ คือ ...[1,2,[3]] อันนี้จะได้ค่าเป็น 1,2,[3]
        // ทีนี้ ตัว concat ก็จะแตกอาเรย์อีกทีนึง ถ้าตัวไหนที่เป็นอาเรย์ (ถ้าตัวไหนไม่เป็นอาเรย์ก็ใช้ค่านั้นเลย)
        // จาก [1] ต่อกับ 1,2,[3] พอใช้ concat ก็จะแตกอาเรย์ เป็น 1 ต่อกับ 1,2,3
        // ดังนั้นมันจะเป็น 1 ต่อกับ 1,2,3 ได้ผลลัพธ์เป็น [1,1,2,3]

        // ให้เอา res ตัวเดิม เพื่อสร้าง res อันใหม่ที่มีการลบชั้นของ array ลง โดยใช้ ฟังก์ชัน concat
        // จากตัวอย่างที่ 3 ก็คือเราเอาตัว res ก่อนหน้ามาแตกอาเรย์ออกก่อนรอบนึง แล้วพอ concat มันก็จะแตกอีกรอบ 
        // ทำให้วนรอบแรก [] ต่อกับ ...[[0], [0], [[0], [0]], [0]] (แตกอาเรย์เป็น [0], [0], [[0], [0]], [0])
        // [] ต่อกับ [0], [0], [[0], [0]], [0] พอใช้ concat ตัวที่เป็น array ก็จะแตกออกอีกชั้น
        // ได้เป็น ช่องว่าง ต่อกับ 0, 0, [0], [0], 0
        // ต่อกันแล้วครอบด้วยอาเรย์ จะได้ [0,0,[0],[0],0]
        res = [].concat(...res);
        // ตรงนี้จะเช็คว่าใน แต่ละตัวในอาเรย์เนี่ย มีที่เป็น array อีกมั้ย (อันนี้ใช้ findIndex เพื่อหา index แล้วเช็ค 
        // ที่จริงอาจจะใช้ find เฉยๆก็ได้ แต่แบบนี้ปลอดภัยกว่า เพราะ เลข 0 มันมีค่าเป็น false อาจทำให้ logic ผิด ถ้าใช้ find)
        const arrIndex = res.findIndex(item => Array.isArray(item));
        // ถ้า index < 0 คือ ไม่เจอตัวที่เป็น array แล้ว ก็ return เลย แต่ยังมีก็วนลูปถัดไป
        if (arrIndex < 0) return res;
    }
}

console.log(flattenDeep(input))